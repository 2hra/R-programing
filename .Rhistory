a = 5
a = 5
b = 2
a+b
a = 5
b = 2
a+b
a+b
a = 5
a+b
b = 2
a+b
a = 5
b = 2
a+b
b = 3
a/b
a = 15
b = 3
a/b
a = 15
b = 3
a/b
a*b
b = 3
a/b
a*b
a = 15
b = 3
a/b
a*b, a/b, a+b
a <- 1
b <- 3
a*b
c-1
a <- 1
b <- 3
c <- (a*b)
c-1
a <- 2
b <- 3
c <- (a*b)
c-1
3+5
2021+1648
a <- 1
a <- 1
a = 2
a + 3
a + 3
a = 2
a + 3
b <- a + 3
x <- 3
y <- 4
a <- 1
a = 2
b <- a + 3
x <- 3
y <- 4
a <- 1
a = 2
b <- a + 3
x <- 3
y <- 4
a <- 1
a = 2
b <- a + 3
x <- 3
y <- 4
a <- 1
a = 2
b <- a + 3
x <- 3
y <- 4
a <- 1
a = 2
b <- a + 3
x <- 3
y <- 4
rm(list=ls())
4 + 8
5*9
a <- 5*9
10%%3
9%%2 # 나머지
9/2
2^3
2**3
7**5
17**5
log(17)
log2(4)
factorial(6)
sample(5)
sample(5)
sample(5)
sample(1:10,4)
sample(1:10,4)
sample(1:10,4)
sample(1:10,4)
sample(1:10, 4)
sample(1:10, 4)
sample(1:10, 4)
sample(1:10, 4)
cos(60)
cos(pi/3)
sin(pi)
c <- a+b
### 변수수
b <- 3
c <- a+b
a+b
c <-"hyora"
### 변수
b <- 3
c <- a+b
a+b
d <-"hyora"
c
d
print(c)
name = 'hyora'
average = mean(c)
age = 14
gender= 'female'
a <- 0.5
b <- 'Jane'
c <- 'dongduk'
a <- TRUE
c <- T
d <- 'TRUE'
e <- NULL
sqrt(-3)
a <- 'data'
a+age
b+d
gender+name
a <-  30
a+age
is.numeric(a)
is.numeric(gender)
is.character(name)
is.character(age)
is.logical(b)
is.logical(c)
is.logical(d)
class(a)
class(c)
class(d)
rm(list=ls()) # 오른쪽 환경창 다 지우기, 맨 위에 적어 두고 필요할 때마다 실행
# 하나씩 값을 넣기엔 너무 비효율
score <- c(90, 84, 70, 60)
score[1]
score[4]
score[5]
# 문자가 값 중 하나라도 있으면 다 문자로 바뀜
score[1] + score[4]
### 벡터
# 하나씩 값을 넣기엔 너무 비효율. c() 활용.
score <- c(90, 84, 70, 'hyora', 60) # c(값 여러개 입력)
### 벡터
# 하나씩 값을 넣기엔 너무 비효율. c() 활용.
score <- c(90, 84, 70, 'hyora', 60) # c(값 여러개 입력)
mean(score)
mean(score)
### 벡터
# 하나씩 값을 넣기엔 너무 비효율. c() 활용.
score <- c(90, 84, 70, 0, 60, 20) # c(값 여러개 입력)
mean(score)
rm(list=ls()) # 오른쪽 환경창 다 지우기, 맨 위에 적어 두고 필요할 때마다 실행
a <- c('a', 'b', 'c')
b <- c(TRUE, FALSE, T)
c <- c(1,2,3)
d <- c(1,2,'a')
e <- c(1:10)
e <- c(1:100) # (이상:이하)로 범위 지정
e
f <- c(1,2,3,90:100)
f[4]
f[12]
g
g <- seq(from = 1, to = 100, by = 5) # 1부터 100까지 5씩 건너뛰기
g
g <- seq(from = 0, to = 100, by = 5) # 1부터 100까지 5씩 건너뛰기
g
h <- seq(0,100,5)
h
?seq
g <- seq(from = 0, to = 100, length.out=6)
g <- seq(from = 0, to = 100, length.out=6)
g
h <- seq(0,1,lenght.out=3)
h
h <- seq(0,100,lenght.out=3)
h
?rep
h <- seq(0,1,length.out=4)
h
v1 <- req(1, 5)
v1 <- rep(1, 5)
v2 <- rep(c(1,2,3),2)
v3 <- rep(c(1,2,3,4),each=3)
v1 <- rep('aaa', times=5) #times 생략 가능
v1 <- rep(c('aaa','bbb'), times=5) #times 생략 가능
v4 <- rep(c(1,2), length.out=9)
v4 <- rep(c(1,2,3,4), length.out=9) # 1,2 세트로 안 끝나고 반복 9에서 끝남.
v4
v4
v5 <- rep(1,5)
v4
x <-c(100, 90, 80)
names(x) <- c('jane','tony','sam')
x
# 결과
#jane tony  sam
#100   90   80
x[3]
### names(), 벡터에 이름 붙이기
x <- c(100, 90, 80)
x
names(x) <- c('jane','tony','sam') # 미리 만들어둔 벡터에 이름 저장
x
# 결과
#jane tony  sam (표 형식으로 나옴)
#100   90   80
x[3] # 결과: sam 80
x[2]
a <- seq(1,9,2)
rm(list=ls()) # 오른쪽 환경창 다 지우기, 맨 위에 적어 두고 필요할 때마다 실행
v1 <- rep(c('aaa','bbb'), times=5) #times 생략 가능, 문자열도 반복 가능
v2 <- rep(c(1,2,3),2) # 그룹으로 반복 가능
v3 <- rep(c(1,2,3,4),each=3) # each는 각 요소별로 반복
v1
v4 <- rep(c(1,2,3,4), length.out=9) # 1,2 세트로 안 끝나고 반복 9에서 끝남.
v4
v5 <- rep(1,5)
### names(), 벡터에 이름 붙이기
x <- c(100, 90, 80)
x
names(x) <- c('jane','tony','sam') # 미리 만들어둔 벡터에 이름 저장
x
# 결과
#jane tony  sam (표 형식으로 나옴)
#100   90   80
x[3]
a <- seq(1,9,2)
a[2]
a[c(1,3,5)]
a[seq(1,5,2)]
seq(1,5,2)
a[-2]
a[-seq(1,5,2)]
a[c(1:4)]
a[-c(1:3)]
score = c(90,85,70)
names(score) = ('A',"B","C")
score = c(90,85,70)
names(score) = c('A',"B","C")
a <- seq(1,10,3)
a[2] <-  5
a[3] <-  9
a <- seq(1,10,3)
a[3] <-  9
a[c(1,3)] <- c(2,6)
a <- seq(1,10,3) # 아래 실행했다가 위에 다시 실행하면 값 다시 덮어써짐.
a[2] <-  5 # 벡터 안의 값 재지정 가능
a[3] <-  9
2*a
c <- c(a,b)
b <-c('apple','banana')
c <- c(a,b)
a[1]+a[2]
sum(a)
mean(a)
median(a)
length(a)
length(c) # 값이 몇 개인지
mean(a[1:3])
sort(a)
?sort
sort(a, decreasing=TRUE)
modified_score <- sort(a,decreasing=TRUE)
sort(a,TRUE)
sort(a,F)
sort(a)
sort(a) # 오름차순이 디폴트트
ｘ　<- １０
rm(list=ls()) # 오른쪽 환경창 다 지우기, 맨 위에 적어 두고 필요할 때마다 실행
a
a <- 'print'
a <- 'print'
a <- 'print'
a
library(xlsx)
x <- read.csv('airquality.xlsx', header=T, sheetIndex=1, encoding='UTF-8')
library(xlsx)
x <- read.csv('airquality.xlsx', header=T, sheetIndex=1, encoding='UTF-8')
x <- read.csv('airquality.xlsx', header=T, sheetIndex=1, encoding='UTF-8')
x <- read.xlsx('airquality.xlsx', header=T, sheetIndex=1, encoding='UTF-8')
air2 <- read.xlsx('airquality.xlsx', header=T, sheetIndex=1, encoding='UTF-8')
air2 <- read.xlsx('airquality.xlsx', header=T, sheetIndex=1)
library(xlsx)
air2 <- read.xlsx('airquality.xlsx', header=T, sheetIndex=1)
head(air)
head(air2)
library(xlsx)
air2 <- read.xlsx('airquality.xlsx', header=T, sheetIndex=1)
## 읽고 쓰기 3) read.xlsx
install.packages('xlsx')
library(xlsx)
library(xlsx)
air2 <- read.xlsx('airquality.xlsx', header=T, sheetIndex=1)
air2 <- read.xlsx('airquality.xlsx', header=T, sheetIndex=1)
head(air2)
air2 <- read.xlsx('airquality.xlsx', header=T, sheetIndex=1)
head(air2)
air2 <- read.xlsx('airquality.xlsx', header=T, sheetIndex=1)
head(air2)
air2 <- read.xlsx('airquality.xlsx', header=T, sheetIndex=1)
air2 <- read.xlsx('airquality.xlsx', header=T, sheetIndex=1)
air2 <- read.xlsx('airquality.xlsx', header=T, sheetIndex=1)
getwd()
getwd()
getwd()
getwd()
setwd("C:/Users/lhr06/OneDrive - 동덕여자대학교/Desktop/DWU/22_2학년/R")
